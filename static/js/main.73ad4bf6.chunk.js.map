{"version":3,"sources":["components/card.js","components/forms.js","components/answers.js","components/buttons.js","components/Question1.js","components/Question2.js","components/paragraph.js","components/Question3.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","name","question","children","Form","type","Answer","header","cutoff","answer","Button","Question1","state","data","stringy","numbersabove","numbersbellow","componentDidMount","setState","aboveBellow","numbers","console","log","filter","number","parseInt","handleInputChange","event","target","value","split","handleFormSubmit","placeholder","onChange","this","length","onClick","Component","Question2","jumble","brokenword","Jumble","word","slice","ans","i","push","concat","join","replace","Paragraph","Question3","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73ad4bf6.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Card(props) {\n    return(\n      <div className=\"card text-center m-2\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title h2\">{props.name}</h5>\n        <h6 className=\"card-subtitle mb-2 text-muted\">{props.question}</h6>\n        <p className=\"card-text\">{props.children}</p>\n      </div>\n    </div>\n    )\n\n}\nexport default Card;\n\n\n","import React from 'react';\n\n\nfunction Form(props) {\n    return(\n            <div className=\"row d-flex justify-content-center mt-4\">\n                <input className=\"form-control form-control-lg w-50 text-center\" type=\"text\"{...props}/>\n            </div>\n    )\n\n}\n\nexport default Form;","import React from 'react';\n\n\nfunction Answer(props){\n    \n    return(\n        <div className=\"m-3\">\n            <h3>{props.header} {props.cutoff}:</h3><h5>{props.answer}</h5>\n        </div>\n    )\n}\n\nexport default Answer;","import React from 'react';\n\n\nfunction Button(props) {\n    return(\n        \n        <button className=\"rounded w-25\" {...props}>Test</button>\n      \n    )\n    \n}\nexport default Button;\n\n\n","import React, { Component } from 'react';\nimport Card from './card';\nimport Form from './forms';\nimport Answer from './answers';\nimport Button from './buttons';\n\nclass Question1 extends Component {\n    state = {\n        data: '',\n        cutoff:0,\n        stringy: {},\n        numbersabove: {},\n        numbersbellow: {}\n\n    }\n    componentDidMount=()=>{\n        this.setState({\n            data: '',\n            stringy: {},\n            numbersabove: {},\n            numbersbellow: {}\n\n        })\n    }\n    aboveBellow = (numbers) => {\n        console.log(numbers);\n        this.setState({\n            numbersabove: numbers.filter(number => parseInt(number) >= this.state.cutoff),\n            numbersbellow: numbers.filter(number => parseInt(number) < this.state.cutoff)\n        },()=>{\n        console.log(this.state.numbersabove);\n        console.log(this.state.numbersbellow);\n        });\n    }\n\n    handleInputChange = event => {\n        console.log(this.state.data);\n        const { name, value } = event.target;\n\n       this.setState({\n            [name]: value,\n            \n        },()=>{\n            this.setState({\n            stringy: this.state.data.split(\" \")\n            })\n        });\n        console.log(this.state.data);\n        console.log(`this is  stringy ${this.state.stringy}`)\n    }\n\n    handleFormSubmit = () => {\n        const numbers = this.state.stringy;\n        this.aboveBellow(numbers)\n    }\n\n\n\n    render() {\n        return (\n            <Card\n                name=\"Question 1\"\n                question=\"Print the number of integers in an array that are above the given input and the number \n                that are below, e.g. for the array [1, 5, 2, 1, 10] with input 6, print “above: 1, below: 4”.\"\n                >\n                <Form\n                    name=\"data\"\n                    placeholder=\"Enter an array of numbers\"\n                    onChange={this.handleInputChange}\n                    value={this.state.data}\n                />\n                <Form\n                    name=\"cutoff\"\n                    placeholder=\"What is the cut off number?\"\n                    onChange={this.handleInputChange}\n                    value={this.state.cutoff}\n                />\n                <Answer\n                    header=\"Total Numbers Above\"\n                    answer={this.state.numbersabove.length}\n                    cutoff={this.state.cutoff}\n                />\n                <Answer\n                    header=\"Total Numbers Bellow\"\n                    answer={this.state.numbersbellow.length}\n                    cutoff={this.state.cutoff}\n                />\n                <Button\n                    onClick={this.handleFormSubmit} />\n            </Card>\n        )\n    }\n}\nexport default Question1;","import React, { Component } from 'react';\nimport Card from './card';\nimport Form from './forms';\nimport Answer from './answers';\nimport Button from './buttons';\n\n\nclass Question2 extends Component {\n    state = {\n        data: '',\n        jumble: 0,\n        brokenword: {},\n        answer: ''\n\n    }\n    componentDidMount = () => {\n        this.setState({\n            data: '',\n            brokenword: {},\n        })\n    }\n\n    Jumble = (word) => {\n        console.log(word);\n        console.log(this.state.jumble);\n        const slice = word.slice(0, this.state.jumble)\n        const ans = [];\n        for (let i = this.state.jumble; i < word.length; i++) {\n            ans.push(word[i]);\n        }\n\n        this.setState({\n            answer: ans.concat(slice).join('').replace(\",\",'')\n\n        }, () => {\n            console.log(this.state.answer);\n\n        });\n    }\n\n\n    handleInputChange = event => {\n        console.log(this.state.data);\n        const { name, value } = event.target;\n\n        this.setState({\n            [name]: value,\n\n        }, () => {\n            this.setState({\n                brokenword: this.state.data.split(\"\")\n            })\n        });\n        console.log(this.state.data);\n        console.log(`this is  stringy ${this.state.brokenword}`)\n    }\n\n    handleFormSubmit = () => {\n        const word = this.state.brokenword;\n        this.Jumble(word)\n    }\n\n\n\n    render() {\n        return (\n            <Card\n                name=\"Question 2\"\n                question=\"Rotate the characters in a string by a given input and have \n                    the overflow appear at the beginning, e.g. “MyString” rotated by 2 is “ngMyStri”.\">\n                    \n                <Form\n                    name=\"data\"\n                    placeholder=\"Enter a word you would like to jumble\"\n                    onChange={this.handleInputChange}\n                    value={this.state.data}\n                />\n                <Form\n                    name=\"jumble\"\n                    placeholder=\"How many would you like to jumble?\"\n                    onChange={this.handleInputChange}\n                    value={this.state.jumble}\n                />\n                <Answer\n                    header=\"The Jumbled Word is\"\n                    answer={this.state.answer}\n                    cutoff={this.state.cutoff}\n                />\n                <Button\n                    onClick={this.handleFormSubmit} />\n            </Card>\n        )\n    }\n}\nexport default Question2;","import React from 'react';\n\n\nfunction Paragraph() {\n    return (\n        <p className=\"text-center h4\">\n            This was the most difficult question you asked me. My quest into React is very young, and \n            it has quickly metamorphize into becoming my favorite language. I am aware that there is still much to learn \n            with React, but if I had to pick one thing to change, it would be having the ablity to import all components into\n            one global file, and be able to access them without having to import them indivdually into each componet file in which we use them.\n</p>\n    )\n}\nexport default Paragraph;","import React, { Component } from 'react';\nimport Card from './card';\nimport Paragraph from './paragraph';\n\n\nclass Question3 extends Component {\n   \n\n    render() {\n        return (\n            <Card\n                name=\"Question 3\"\n                question=\"If you could change 1 thing about your favorite framework/language/platform (pick one),\n                 what would it be?\"\n                >\n                <Paragraph/>\n            </Card>\n        )\n    }\n}\nexport default Question3;","import React from 'react';\nimport Question1 from './components/Question1';\nimport Question2 from './components/Question2';\nimport Question3 from './components/Question3';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Question1/>\n      <Question2/>\n      <Question3/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}